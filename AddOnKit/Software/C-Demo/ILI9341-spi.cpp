//
// automatically generated by spin2cpp v1.92 on Sat May 09 00:01:24 2015
// C:\Users\Float\Downloads\spin2cpp_v1.92\spin2cpp.exe C:\Users\Float\Downloads\OpenWest2015-master\OpenWest2015-master\AddOnKit\Software\LCD Driver\ILI9341-test.spin 
//

/* 
////////////////////////////////////////////////////////////////////////////////////////////
//                  ILI9341_spi.spin
// 320x240 LCD driver for ILI9341 controller.  This version is SPI based.

// Author: Mark Tillotson
// Updated: 2013-11-15
// Designed For: P8X32A
// Version: 1.0

// Provides

// PUB  Stop

// PUB  Start (nRES, nCS, RS, MOSI, SCLK)
// pin numbers for nRESET, nCS, RS, MOSI and SCLK

// PUB  Synch
// wait for previous command to finish, normally you don't need to call this

// PUB  SetColours (fore, back)
// Colours are 16 bit, RRRRRGGGGGGBBBBB (5, 6, 5 bits per colour)
// foreground colour used for drawing generally, background for clearing screen and character backgrounds

// PUB  ClearScreen

// PUB  DrawDot (xl, yt)

// PUB  DrawLine (xl, yt, xr, yb)

// PUB  DrawChar (xl, yt, chr)
// coords of top-left, used Prop font (16x32 pixels)

// PUB  DrawCharSmall (xl, yt, chr)
// shrunk Prop font, 8x16 pixels

// PUB  DrawString (xl, yt, str)
// null terminated byte string in hub memory

// PUB  DrawStringSmall (xl, yt, str)

// PUB  DrawRect (xl, yt, xr, yb)
// Note you must ensure xl <= xr, yt <= yb else it will hang


// ToDo:   Allow setting up in portrait or landscape mode (currently landscape mode)


// See end of file for standard MIT licence / terms of use.

// Update History:

// v1.0 - Initial version 2013-11-15

////////////////////////////////////////////////////////////////////////////////////////////
 */
#include <propeller.h>
#include "ILI9341-spi.h"

#ifdef __GNUC__
#define INLINE__ static inline
#define Yield__() __asm__ volatile( "" ::: "memory" )
#define PostEffect__(X, Y) __extension__({ int32_t tmp__ = (X); (X) = (Y); tmp__; })
#else
#define INLINE__ static
static int32_t tmp__;
#define PostEffect__(X, Y) (tmp__ = (X), (X) = (Y), tmp__)
#define Yield__()
#endif

uint8_t ILI9341_spi::dat[] = {
  0x00, 0x01, 0x01, 0x0a, 0x39, 0x05, 0xcb, 0x00, 0x2c, 0x00, 0x34, 0x02, 0x00, 0x03, 0xcf, 0x00, 
  0xc1, 0x30, 0x00, 0x00, 0x85, 0x03, 0xe8, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0xea, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x64, 0x04, 0xed, 0x00, 0x03, 0x12, 0x81, 0x00, 0x20, 0x01, 0xf7, 0x00, 
  0x23, 0x01, 0xc0, 0x00, 0x10, 0x01, 0xc1, 0x00, 0x3e, 0x02, 0xc5, 0x00, 0x28, 0x00, 0x00, 0x00, 
  0x86, 0x01, 0xc7, 0x00, 0x28, 0x01, 0x36, 0x00, 0x55, 0x01, 0x3a, 0x00, 0x00, 0x02, 0xb1, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x08, 0x03, 0xb6, 0x00, 0x82, 0x27, 0x00, 0x00, 0x00, 0x01, 0xf2, 0x00, 
  0x01, 0x01, 0x26, 0x00, 0x0f, 0x0f, 0xe0, 0x00, 0x31, 0x2b, 0x0c, 0x0e, 0x08, 0x4e, 0xf1, 0x37, 
  0x07, 0x10, 0x03, 0x0e, 0x09, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe1, 0x00, 0x0e, 0x14, 0x03, 0x11, 
  0x07, 0x31, 0xc1, 0x48, 0x08, 0x0f, 0x0c, 0x31, 0x36, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xa5, 0xbe, 0xa0, 
  0x52, 0xa7, 0xbe, 0x08, 0x04, 0xa4, 0xfe, 0x80, 0x52, 0xc1, 0xbe, 0x08, 0x51, 0xe9, 0xbf, 0xa0, 
  0x51, 0xed, 0xbf, 0xa0, 0x4d, 0xed, 0xbf, 0x68, 0x4e, 0xed, 0xbf, 0x68, 0x01, 0xac, 0xfe, 0xa0, 
  0x29, 0x5a, 0xfc, 0x5c, 0x50, 0xe9, 0xbf, 0x64, 0x02, 0xac, 0xfe, 0xa0, 0x29, 0x5a, 0xfc, 0x5c, 
  0x50, 0xe9, 0xbf, 0x68, 0x19, 0xac, 0xfe, 0xa0, 0x29, 0x5a, 0xfc, 0x5c, 0x60, 0xbd, 0xbe, 0x0a, 
  0x2e, 0x00, 0x68, 0x5c, 0x04, 0xc0, 0xfe, 0x80, 0x5e, 0xb7, 0xbe, 0xa0, 0x10, 0xb6, 0xfe, 0x28, 
  0xff, 0xb6, 0xfe, 0x60, 0x5e, 0xad, 0xbe, 0xa0, 0x18, 0xac, 0xfe, 0x28, 0x5e, 0xab, 0xbe, 0xa0, 
  0x08, 0xaa, 0xfe, 0x28, 0xff, 0xaa, 0xfe, 0x60, 0x5e, 0xb9, 0xbe, 0xa0, 0xff, 0xb8, 0xfe, 0x60, 
  0xec, 0xe8, 0xfd, 0x5c, 0x00, 0xaa, 0x7e, 0x86, 0x24, 0x00, 0x68, 0x5c, 0x01, 0x0b, 0xfe, 0x5c, 
  0x60, 0xb9, 0xbe, 0x00, 0x01, 0xc0, 0xfe, 0x80, 0x20, 0xaa, 0xfe, 0xe4, 0x02, 0xc0, 0xfe, 0x80, 
  0x03, 0xc0, 0xfe, 0x64, 0x00, 0xac, 0x7e, 0x86, 0x29, 0x5a, 0xd4, 0x5c, 0x10, 0x00, 0x7c, 0x5c, 
  0xf1, 0xaf, 0xbe, 0xa0, 0x47, 0xaf, 0xbe, 0x80, 0x00, 0xae, 0xfe, 0xf8, 0x29, 0xac, 0xfe, 0xe4, 
  0x00, 0x00, 0x7c, 0x5c, 0xf0, 0x91, 0x3e, 0x08, 0xf0, 0xa7, 0xbe, 0x0a, 0x2f, 0x00, 0x68, 0x5c, 
  0x60, 0xdc, 0xfc, 0x5c, 0x02, 0xa6, 0x7e, 0x86, 0x37, 0x00, 0x54, 0x5c, 0x70, 0x8b, 0xbe, 0xa0, 
  0x6f, 0x8d, 0xbe, 0xa0, 0x2e, 0x00, 0x7c, 0x5c, 0x05, 0xa6, 0x7e, 0x86, 0x42, 0x00, 0x54, 0x5c, 
  0x45, 0xbd, 0xbe, 0xa0, 0x46, 0x8b, 0xbe, 0xa0, 0x00, 0xde, 0xfe, 0xa0, 0x3f, 0xe7, 0xfe, 0xa0, 
  0x00, 0xe0, 0xfe, 0xa0, 0xef, 0xe8, 0xfe, 0xa0, 0x6f, 0xfe, 0xfc, 0x5c, 0x5e, 0x8b, 0xbe, 0xa0, 
  0x2e, 0x00, 0x7c, 0x5c, 0x04, 0xa6, 0x7e, 0x86, 0x46, 0x00, 0x54, 0x5c, 0x6f, 0xfe, 0xfc, 0x5c, 
  0x2e, 0x00, 0x7c, 0x5c, 0x06, 0xa6, 0x7e, 0x86, 0x4a, 0x00, 0x54, 0x5c, 0x80, 0x50, 0xfd, 0x5c, 
  0x2e, 0x00, 0x7c, 0x5c, 0x07, 0xa6, 0x7e, 0x86, 0x52, 0x00, 0x54, 0x5c, 0x5f, 0xcf, 0xbe, 0xa0, 
  0x00, 0xce, 0x7e, 0xc1, 0x67, 0xcf, 0xb2, 0xa4, 0x01, 0xbc, 0xfe, 0x34, 0xb2, 0x74, 0xfd, 0x5c, 
  0x2e, 0x00, 0x7c, 0x5c, 0x08, 0xa6, 0x7e, 0x86, 0x5c, 0x00, 0x54, 0x5c, 0x5f, 0xc3, 0xbe, 0xa0, 
  0x00, 0xc3, 0x7e, 0x62, 0x5a, 0x00, 0x68, 0x5c, 0xff, 0xc2, 0xfe, 0x60, 0xd6, 0xd6, 0xfd, 0x5c, 
  0x2e, 0x00, 0x7c, 0x5c, 0xc6, 0xaa, 0xfd, 0x5c, 0x2e, 0x00, 0x7c, 0x5c, 0x09, 0xa6, 0x7e, 0x86, 
  0x2e, 0x00, 0x54, 0x5c, 0xa9, 0x62, 0xfd, 0x5c, 0x2e, 0x00, 0x7c, 0x5c, 0x52, 0xbd, 0xbe, 0x08, 
  0x04, 0xa4, 0xfe, 0x80, 0x52, 0xbf, 0xbe, 0x08, 0x04, 0xa4, 0xfe, 0x84, 0x5e, 0xdf, 0xbe, 0xa0, 
  0x10, 0xde, 0xfe, 0x28, 0x5e, 0xe1, 0xbe, 0xa0, 0x49, 0xe1, 0xbe, 0x60, 0x5f, 0xe7, 0xbe, 0xa0, 
  0x10, 0xe6, 0xfe, 0x28, 0x5f, 0xe9, 0xbe, 0xa0, 0x49, 0xe9, 0xbe, 0x60, 0x6f, 0xc5, 0xbe, 0xa0, 
  0x70, 0xc7, 0xbe, 0xa0, 0x00, 0x00, 0x7c, 0x5c, 0x6f, 0xc5, 0xbe, 0xa0, 0x70, 0xc7, 0xbe, 0xa0, 
  0x74, 0xb5, 0xbe, 0xa0, 0x70, 0xb5, 0xbe, 0x84, 0x01, 0xb4, 0xfe, 0x80, 0x0b, 0x2b, 0xfe, 0x5c, 
  0x16, 0x37, 0xfe, 0x5c, 0x45, 0xb9, 0xbe, 0xa0, 0x73, 0xb1, 0xbe, 0xa0, 0x6f, 0xb1, 0xbe, 0x84, 
  0x01, 0xb0, 0xfe, 0x80, 0x1c, 0x3d, 0xfe, 0x5c, 0x7a, 0xb0, 0xfe, 0xe4, 0x1f, 0x43, 0xfe, 0x5c, 
  0x01, 0xc6, 0xfe, 0x80, 0x74, 0xb4, 0xfe, 0xe4, 0x00, 0x00, 0x7c, 0x5c, 0x73, 0xef, 0xbe, 0xa0, 
  0x6f, 0xef, 0xbe, 0x84, 0x77, 0xef, 0xbe, 0xa8, 0x08, 0xee, 0xfe, 0x2c, 0x74, 0xf1, 0xbe, 0xa0, 
  0x70, 0xf1, 0xbe, 0x84, 0x78, 0xf1, 0xbe, 0xa8, 0x08, 0xf0, 0xfe, 0x2c, 0x73, 0xdf, 0x3e, 0x85, 
  0x01, 0xea, 0xfe, 0xa0, 0x75, 0xeb, 0x8e, 0xa4, 0x74, 0xe1, 0x3e, 0x85, 0x01, 0xec, 0xfe, 0xa0, 
  0x76, 0xed, 0x8e, 0xa4, 0x70, 0xc7, 0xbe, 0xa0, 0x6f, 0xc5, 0xbe, 0xa0, 0x78, 0xef, 0x3e, 0x85, 
  0x9d, 0x00, 0x4c, 0x5c, 0x78, 0xbd, 0xbe, 0xa4, 0x01, 0xbc, 0xfe, 0x38, 0xa9, 0x62, 0xfd, 0x5c, 
  0x74, 0xc7, 0x3e, 0x86, 0xa8, 0x00, 0x68, 0x5c, 0x76, 0xc7, 0xbe, 0x80, 0x77, 0xbd, 0xbe, 0x81, 
  0x94, 0x00, 0x4c, 0x5c, 0x75, 0xc5, 0xbe, 0x80, 0x78, 0xbd, 0xbe, 0x84, 0x94, 0x00, 0x7c, 0x5c, 
  0x77, 0xbd, 0xbe, 0xa4, 0x01, 0xbc, 0xfe, 0x38, 0xa9, 0x62, 0xfd, 0x5c, 0x73, 0xc5, 0x3e, 0x86, 
  0xa8, 0x00, 0x68, 0x5c, 0x75, 0xc5, 0xbe, 0x80, 0x78, 0xbd, 0xbe, 0x81, 0x9f, 0x00, 0x4c, 0x5c, 
  0x76, 0xc7, 0xbe, 0x80, 0x77, 0xbd, 0xbe, 0x84, 0x9f, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 
  0x40, 0xc5, 0x7e, 0x87, 0xb1, 0x00, 0x4c, 0x5c, 0xf0, 0xc6, 0x7e, 0x87, 0xb1, 0x00, 0x4c, 0x5c, 
  0x0b, 0x2b, 0xfe, 0x5c, 0x2c, 0xb6, 0xfe, 0xa0, 0x45, 0xb9, 0xbe, 0xa0, 0xfb, 0x00, 0xfe, 0x5c, 
  0x00, 0x00, 0x7c, 0x5c, 0x67, 0xc3, 0xbe, 0x02, 0xba, 0x00, 0x68, 0x5c, 0x01, 0xce, 0xfe, 0x80, 
  0x01, 0xbc, 0x7e, 0x62, 0xc6, 0xaa, 0xe9, 0x5c, 0x01, 0xbc, 0x7e, 0x62, 0xd6, 0xd6, 0xd5, 0x5c, 
  0xb2, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 0x64, 0xcd, 0xbe, 0x08, 0x04, 0xc8, 0xfe, 0x80, 
  0x01, 0xc2, 0x7e, 0x62, 0x01, 0xcc, 0xd6, 0x28, 0x00, 0x00, 0x7c, 0x5c, 0x61, 0xc9, 0xbe, 0xa0, 
  0xff, 0xc8, 0xfe, 0x60, 0x01, 0xc8, 0xfe, 0x28, 0x00, 0xc9, 0xfe, 0x68, 0x07, 0xc8, 0xfe, 0x2c, 
  0x00, 0x00, 0x7c, 0x5c, 0xc0, 0x8a, 0xfd, 0x5c, 0x20, 0xca, 0xfe, 0xa0, 0x0b, 0x2b, 0xfe, 0x5c, 
  0x01, 0xc6, 0xfe, 0x80, 0x16, 0x37, 0xfe, 0x5c, 0xbb, 0x7e, 0xfd, 0x5c, 0x10, 0xb0, 0xfe, 0xa0, 
  0x02, 0xcc, 0xfe, 0x29, 0x45, 0xb9, 0xb2, 0xa0, 0x46, 0xb9, 0x8e, 0xa0, 0x1c, 0x3d, 0xfe, 0x5c, 
  0xcd, 0xb0, 0xfe, 0xe4, 0xc8, 0xca, 0xfe, 0xe4, 0x20, 0xc6, 0xfe, 0x84, 0x10, 0xc4, 0xfe, 0x80, 
  0x00, 0x00, 0x7c, 0x5c, 0xc0, 0x8a, 0xfd, 0x5c, 0x10, 0xca, 0xfe, 0xa0, 0x0b, 0x2b, 0xfe, 0x5c, 
  0x01, 0xc6, 0xfe, 0x80, 0x16, 0x37, 0xfe, 0x5c, 0xbb, 0x7e, 0xfd, 0x5c, 0x04, 0xc8, 0xfe, 0x80, 
  0x4b, 0xcd, 0xbe, 0x60, 0x66, 0xbf, 0xbe, 0xa0, 0x02, 0xbe, 0xfe, 0x2c, 0x5f, 0xcd, 0xbe, 0x68, 
  0x08, 0xb0, 0xfe, 0xa0, 0x04, 0xcc, 0xfe, 0x29, 0x45, 0xb9, 0xb2, 0xa0, 0x46, 0xb9, 0x8e, 0xa0, 
  0x1c, 0x3d, 0xfe, 0x5c, 0xe2, 0xb0, 0xfe, 0xe4, 0x1f, 0x43, 0xfe, 0x5c, 0xd8, 0xca, 0xfe, 0xe4, 
  0x10, 0xc6, 0xfe, 0x84, 0x08, 0xc4, 0xfe, 0x80, 0x00, 0x00, 0x7c, 0x5c, 0x4d, 0xe9, 0xbf, 0x64, 
  0x00, 0x00, 0x00, 0x00, 0x4c, 0xe9, 0xbf, 0x64, 0x5b, 0xbb, 0xbe, 0xa0, 0x22, 0x57, 0xfe, 0x5c, 
  0x4c, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x00, 0x00, 0x4d, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x7c, 0x5c, 
  0xec, 0xe8, 0xfd, 0x5c, 0x4c, 0xe9, 0xbf, 0x64, 0x5c, 0xbb, 0xbe, 0xa0, 0x22, 0x57, 0xfe, 0x5c, 
  0x4c, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x7c, 0x5c, 0xec, 0xe8, 0xfd, 0x5c, 0x4c, 0xe9, 0xbf, 0x64, 
  0x5c, 0xbb, 0xbe, 0xa0, 0x2c, 0x6b, 0xfe, 0x5c, 0x4c, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x7c, 0x5c, 
  0x4c, 0xe9, 0xbf, 0x64, 0x5c, 0xbb, 0xbe, 0xa0, 0x22, 0x57, 0xfe, 0x5c, 0x4c, 0xe9, 0xbf, 0x68, 
  0x00, 0x00, 0x7c, 0x5c, 0x4c, 0xe9, 0xbf, 0x64, 0x5c, 0xbb, 0xbe, 0xa0, 0x2c, 0x6b, 0xfe, 0x5c, 
  0x4c, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x7c, 0x5c, 0x2a, 0xb6, 0xfe, 0xa0, 0x62, 0xb9, 0xbe, 0xa0, 
  0xfb, 0x00, 0xfe, 0x5c, 0x40, 0xb9, 0xfe, 0xa0, 0x06, 0x15, 0xfe, 0x5c, 0x2b, 0xb6, 0xfe, 0xa0, 
  0x63, 0xb9, 0xbe, 0xa0, 0xfb, 0x00, 0xfe, 0x5c, 0x40, 0xb9, 0xfe, 0xa0, 0x06, 0x15, 0xfe, 0x5c, 
  0x00, 0x00, 0x7c, 0x5c, 0x2c, 0xb6, 0xfe, 0xa0, 0xec, 0xe8, 0xfd, 0x5c, 0x4c, 0xe9, 0xbf, 0x64, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xe9, 0xbf, 0x68, 0x00, 0x00, 0x7c, 0x5c, 0x5c, 0xbb, 0xbe, 0xa0, 
  0x2c, 0x6b, 0xfe, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 0x4d, 0xe9, 0xbf, 0x64, 0x4c, 0xe9, 0xbf, 0x68, 
  0x00, 0x00, 0x7c, 0x5c, 0x08, 0xb2, 0xfe, 0xa0, 0x18, 0xba, 0xfe, 0x2c, 0x01, 0xba, 0xfe, 0x2d, 
  0x4e, 0xe9, 0xbf, 0x70, 0x4f, 0xe9, 0xbf, 0x64, 0x01, 0xba, 0xfe, 0x2d, 0x4f, 0xe9, 0xbf, 0x68, 
  0x25, 0xb3, 0xfe, 0xe4, 0x4f, 0xe9, 0xbf, 0x64, 0x00, 0x00, 0x7c, 0x5c, 0x10, 0xb2, 0xfe, 0xa0, 
  0x10, 0xba, 0xfe, 0x2c, 0x01, 0xba, 0xfe, 0x2d, 0x4e, 0xe9, 0xbf, 0x70, 0x4f, 0xe9, 0xbf, 0x64, 
  0x01, 0xba, 0xfe, 0x2d, 0x4f, 0xe9, 0xbf, 0x68, 0x2f, 0xb3, 0xfe, 0xe4, 0x4f, 0xe9, 0xbf, 0x64, 
  0x00, 0x00, 0x7c, 0x5c, 0x2a, 0xb6, 0xfe, 0xa0, 0x00, 0xb8, 0xfe, 0xa0, 0xf5, 0xf4, 0xfd, 0x5c, 
  0x2b, 0xb6, 0xfe, 0xa0, 0xf5, 0xf4, 0xfd, 0x5c, 0x2c, 0xb6, 0xfe, 0xa0, 0xec, 0xe8, 0xfd, 0x5c, 
  0x16, 0x37, 0xfe, 0x5c, 0x4b, 0xb4, 0xfe, 0xa0, 0x0a, 0xb4, 0xfe, 0x2c, 0x5e, 0xb9, 0xbe, 0xa0, 
  0x1c, 0x3d, 0xfe, 0x5c, 0x41, 0xb5, 0xfe, 0xe4, 0x1f, 0x43, 0xfe, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 
};
int32_t ILI9341_spi::Stop(void)
{
  if (cog != 0) {
    cogstop((cog - 1));
  }
  cog = 0;
  return 0;
}

int32_t ILI9341_spi::Start(int32_t nRES, int32_t nCS, int32_t RS, int32_t MOSI, int32_t SCLK)
{
  int32_t	mask;
  int32_t result = 0;
  Stop();
  cmd = CMD_SETUP;
  ((int32_t *)&dat[1484])[0] = 1 << nCS;
  ((int32_t *)&dat[1488])[0] = 1 << RS;
  ((int32_t *)&dat[1492])[0] = 1 << MOSI;
  ((int32_t *)&dat[1496])[0] = 1 << SCLK;
  ((int32_t *)&dat[1500])[0] = 1 << nRES;
  ((int32_t *)&dat[1504])[0] = ((*(int32_t *)&dat[1500]) | (*(int32_t *)&dat[1484])) | (*(int32_t *)&dat[1496]);
  arg0 = (int32_t)(&(*(int32_t *)&dat[0]));
  cog = 1 + cognew((int32_t)(&(*(int32_t *)&dat[156])), (int32_t)(&cmd));
  if (cog != 0) {
    Synch();
  }
  result = cog;
  return result;
}

int32_t ILI9341_spi::Synch(void)
{
  while (!(cmd == 0)) {
    Yield__();
  }
  return 0;
}

int32_t ILI9341_spi::ClearScreen(void)
{
  Synch();
  cmd = CMD_CLEAR;
  return 0;
}

int32_t ILI9341_spi::DrawDot(int32_t xl, int32_t yt)
{
  Synch();
  arg0 = (xl << 16) | yt;
  cmd = CMD_DOT;
  return 0;
}

int32_t ILI9341_spi::DrawLine(int32_t xl, int32_t yt, int32_t xr, int32_t yb)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = (xr << 16) | yb;
  cmd = CMD_LINE;
  return 0;
}

int32_t ILI9341_spi::DrawChar(int32_t xl, int32_t yt, int32_t chr)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = chr & 0xff;
  cmd = CMD_CHAR;
  return 0;
}

int32_t ILI9341_spi::DrawCharSmall(int32_t xl, int32_t yt, int32_t chr)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = chr | 0x100;
  cmd = CMD_CHAR;
  return 0;
}

int32_t ILI9341_spi::DrawString(int32_t xl, int32_t yt, int32_t str)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = str;
  cmd = CMD_STRING;
  return 0;
}

int32_t ILI9341_spi::DrawStringSmall(int32_t xl, int32_t yt, int32_t str)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = -str;
  cmd = CMD_STRING;
  return 0;
}

int32_t ILI9341_spi::DrawRect(int32_t xl, int32_t yt, int32_t xr, int32_t yb)
{
  Synch();
  arg0 = (xl << 16) | yt;
  arg1 = (xr << 16) | yb;
  cmd = CMD_RECT;
  return 0;
}

int32_t ILI9341_spi::SetColours(int32_t fore, int32_t back)
{
  Synch();
  arg0 = (back << 16) | (fore & 0xffff);
  cmd = CMD_SETCOLOURS;
  return 0;
}

/* 
////////////////////////////////////////////////////////////////////////////////////////////
//                                TERMS OF USE: MIT License
////////////////////////////////////////////////////////////////////////////////////////////
// Permission is hereby granted, free of charge, to any person obtaining a copy of this 
// software and associated documentation files (the "Software"), to deal in the Software 
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
// persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.
////////////////////////////////////////////////////////////////////////////////////////////
 */
